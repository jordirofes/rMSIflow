View(matrixList)
View(peakM)
View(matrixList)
source('~/GitHub/rMSIteachings/initialPlotter.R', echo=TRUE)
source('~/GitHub/rMSIteachings/initialPlotter.R', echo=TRUE)
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
if(length(peakM$numPixels) != 1){
matrixList <- matrixSeparation(peakM)
}
View(matrixList)
mz <- 400
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC"))
mz <- 400
rMSIproc::plotPeakImageG(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
rMSIproc::plotPeakImageG(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
rMSIproc::plotPeakImageG(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
rMSIproc::plotPeakImageG(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC"))
mz <- 400
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1])
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC"))
mz <- 400
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC"))
plotly::subplot(pl)
mz <- 400
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC"))
plotly::subplot(pl, pl2)
View(pl2)
View(pl)
mz <- 400
k <- rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1])
k2 <- rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC")
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC"))
plotly::subplot(pl, pl2)
View(k)
View(k2)
?plotPeakImage
library(rMSIproc)
View(plotPeakImage)
mz <- 400
k <- rMSIproc::plotPeakImage(matrixList[[1]], mz, plot_labels = groupsImg[1])
mz <- 400
k <- rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
k2 <- rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
plotly::subplot(pl, pl2)
mz <- 400
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
#pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
#pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
# plotly::subplot(pl, pl2)
mz <- 400
#rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
#rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
# plotly::subplot(pl, pl2)
mz <- 400
#rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
#rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
plotly::subplot(pl, pl2)
mz <- 400
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
#pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
#pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
#plotly::subplot(pl, pl2)
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "RMS")
mz <- 400
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "RMS")
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "AcqTic")
#pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
#pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
#plotly::subplot(pl, pl2)
bad <- list.files(wDir, pattern = "^ramdisk")
imageName <- list.files(wDir, pattern = "proc.tar")
imageName <- imageName[!(imageName %in% bad)]
# Then we run the code so it extracts the image information and calculates de average spectrum
avSpec <- lapply(imageName, function(name){
image <- rMSI::LoadMsiData(file.path(wDir, name))
mass <- image$mass
aS <- rMSIproc::AverageSpectrum(image)
spect <- cbind(mass, aS)
return(aS)
})
avSepcData <- data.frame(do.call(rbind, avSpec))
View(avSepcData)
row.names(avSepcData) <- imageName
colnames(avSepcData) <- image$mass
# Then we run the code so it extracts the image information and calculates de average spectrum
avSpec <- lapply(imageName, function(name){
image <- rMSI::LoadMsiData(file.path(wDir, name))
mass <- image$mass
aS <- rMSIproc::AverageSpectrum(image)
spect <- cbind(mass, aS)
return(spect)
})
View(avSpec)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(spect) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSpec) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
avSepcData <- data.frame(do.call(rbind, avSpec))
View(avSepcData)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSpecData) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSpectData) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepctData) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(x = avSepcData$mass, y =avSepcData$aS)+ xlab("M/Z") + ylab("Intensity"))
View(avSpec)
avSepcData <- data.frame(avSpec)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(x = avSepcData$mass, y = avSepcData$aS.1)+
geom_line(x = avSepcData$mass, y = avSepcData$aS.2)+ geom_line(x = avSepcData$mass, y = avSepcData$aS.3)+
geom_line(x = avSepcData$mass, y = avSepcData$aS.2)+ geom_line(x = avSepcData$mass, y = avSepcData$aS.3)+
geom_line(x = avSepcData$mass, y = avSepcData$aS.4)+ xlab("M/Z") + ylab("Intensity"))
View(avSepcData)
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(x = avSepcData$mass, y = avSepcData$aS.1))
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(x = avSepcData$mass, y = avSepcData$`aS.1`))
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(x = mass, y = aS.1))
View(avSepcData)
ggplot2::ggplot(avSepcData) + geom_line(x = mass, y = aS.1)
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1)))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4))+ xlab("M/Z") + ylab("Intensity"))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1), colours = "red")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4))+ xlab("M/Z") + ylab("Intensity"))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1), colour = "red")) +
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4))+ xlab("M/Z") + ylab("Intensity"))
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1), colour = "red"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1), colour = "red")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2),colour = "blue")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3),colour = "yellow")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2),colour = "green")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3),colour = "orange")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4),colour = "black")+ xlab("M/Z") + ylab("Intensity"))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1), colour = "red")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2),colour = "blue")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3),colour = "yellow")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4),colour = "green")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.5),colour = "orange")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.6),colour = "black")+ xlab("M/Z") + ylab("Intensity"))
View(avSepcData)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS), colour = "red")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.1),colour = "blue")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2),colour = "yellow")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3),colour = "green")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4),colour = "orange")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.5),colour = "black")+ xlab("M/Z") + ylab("Intensity"))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
View(initialPlotter)
# Insert where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/CollCap/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
# Insert the group for each image (control, control, problem, ...) in order
groupsImg <- c("Control", "Control", "Transition", "Transition", "Tumor", "Tumor")
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
if(length(peakM$numPixels) != 1){
matrixList <- matrixSeparation(peakM)
}
source('~/GitHub/rMSIteachings/initialPlotter.R', echo=TRUE)
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
if(length(peakM$numPixels) != 1){
matrixList <- matrixSeparation(peakM)
}
View(peakM)
View(matrixList)
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600       #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(4,6)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
pl <- lapply(1:length(img2plot), function(i){
plotly::ggplotly(p = plots[[i]])
})
plotly::subplot(pl)
# We can use rMSI functions to plot the average spectra of an image to explore the raw data
# First you will need to put the .tar of the images on the same directory you are working on
bad <- list.files(wDir, pattern = "^ramdisk")
imageName <- list.files(wDir, pattern = "proc.tar")
imageName <- imageName[!(imageName %in% bad)]
# Then we run the code so it extracts the image information and calculates de average spectrum
avSpec <- lapply(imageName, function(name){
image <- rMSI::LoadMsiData(file.path(wDir, name))
mass <- image$mass
aS <- rMSIproc::AverageSpectrum(image)
spect <- cbind(mass, aS)
return(spect)
})
avSepcData <- data.frame(avSpec)
row.names(avSepcData) <- imageName
mz <- 400
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "RMS")
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "AcqTic")
#pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
#pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
#plotly::subplot(pl, pl2)
?AverageSpectrum
View(peakM)
dataNormTic <- peakM$intensity/peakM$normalizations$TIC ### Dividim les intensitats pel factor de normalització TIC
pca <- prcomp(dataNormTic, center = T, scale. = T) ### Fem la PCA de la matriu de pics
for (i in which(pca$sdev > 2)){
rMSIproc::plotValuesImage(peakM, pca$x[,i])
}
dataRaw <- peakM$intensity
View(dataRaw)
dim(dataRaw)
dataRaw <- peakM$intensity
dataNormTic <- peakM$intensity/peakM$normalizations$TIC ### Dividim les intensitats pel factor de normalització TIC
pca <- prcomp(dataRaw, center = T, scale. = T) ### Fem la PCA de la matriu de pics
for (i in which(pca$sdev > 2)){
rMSIproc::plotValuesImage(peakM, pca$x[,i])
}
dataRaw <- peakM$intensity
dataNormTic <- peakM$intensity/peakM$normalizations$TIC ### Dividim les intensitats pel factor de normalització TIC
pcaRaw <- prcomp(dataRaw, center = T, scale. = T) ### Fem la PCA de la matriu de pics
pcaNormTic <- prcomp(dataNormTic, center = T, scale = T)
rMSIproc::plotValuesImage(peakM, pcaRaw$x[,1])
rMSIproc::plotValuesImage(peakM, pcaNormTic$x[,1])
library(ggplot2)
View(pcaRaw)
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]))
View(matrixSeparation)
vectorGroups <- mapply(function(groups,i){
rep(groups,  peakM$numPixels[i])
}, groupsImg, 1:length(groupsImg))
View(vectorGroups)
# Insert where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/CollCap/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
# Insert the group for each image (control, control, problem, ...) in order
groupsImg <- c("Control1", "Control2", "Transition1", "Transition2", "Tumor1", "Tumo2")
vectorGroups <- mapply(function(groups,i){
rep(groups,  peakM$numPixels[i])
}, groupsImg, 1:length(groupsImg))
dataRaw <- peakM$intensity
dataNormTic <- peakM$intensity/peakM$normalizations$TIC ### Dividim les intensitats pel factor de normalització TIC
pcaRaw <- prcomp(dataRaw, center = T, scale. = T) ### Fem la PCA de la matriu de pics
pcaNormTic <- prcomp(dataNormTic, center = T, scale = T)
listGroups <- mapply(function(groups,i){
rep(groups,  peakM$numPixels[i])
}, groupsImg, 1:length(groupsImg))
vectorGroups <- do.call(cbind, listGroups)
vectorGroups <- cbind(listGroups)
vectorGroups <- do.call(cbind, listGroups)
View(vectorGroups)
# Insert where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/CollCap/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
# Insert the group for each image (control, control, problem, ...) in order
groupsImg <- c("Control1", "Control2", "Transition1", "Transition2", "Tumor1", "Tumor2")
listGroups <- mapply(function(groups,i){
rep(groups,  peakM$numPixels[i])
}, groupsImg, 1:length(groupsImg))
vectorGroups <- unlist(listGroups)
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), color = (vectorGroups)) + xlab(PCA1) + ylab(PCA2)
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), color = (vectorGroups)) + xlab("PCA1") + ylab("PCA2")
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), color = (vectorGroups)) + xlab("PCA1") + ylab("PCA2")
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]) + xlab("PCA1") + ylab("PCA2")
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2])) + xlab("PCA1") + ylab("PCA2")
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2])) + xlab("PCA1") + ylab("PCA2")
class(vectorGroups)
vectorGroups
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), color = (vectorGroups)) + xlab("PCA1") + ylab("PCA2")
listGroups2 <- lapply(1:length(peakM$numPixels), function(numb){
rep(numb, peakM$numPixels[numb])
})
View(listGroups2)
vectorGroups2 <- unlist(listGroups2)
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), color = (vectorGroups20)) + xlab("PCA1") + ylab("PCA2")
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), color = (vectorGroups2)) + xlab("PCA1") + ylab("PCA2")
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colour = (vectorGroups2)) + xlab("PCA1") + ylab("PCA2")
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colors = (vectorGroups2)) + xlab("PCA1") + ylab("PCA2")
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colors = (vectorGroups2)) + xlab("PCA1") + ylab("PCA2")
ggplot2::ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), color = (vectorGroups2)) + xlab("PCA1") + ylab("PCA2")
ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colour = (vectorGroups2)) + xlab("PCA1") + ylab("PCA2")
ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colour = "Blue") + xlab("PCA1") + ylab("PCA2")
ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colour = vectorGroups2) + xlab("PCA1") + ylab("PCA2")
ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colour = c("blue", "yellow")) + xlab("PCA1") + ylab("PCA2")
length(vectorGroups2)
ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colour = c(vectorGroups2)) + xlab("PCA1") + ylab("PCA2")
groupsColors <- c("Blue", "Green", "Yellow", "Orance", "Red", "Purple")
listGroups <- mapply(function(groups,i){
rep(groups,  peakM$numPixels[i])
}, groupsColors, 1:length(groupsImg))
vectorGroups <- unlist(listGroups)
ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colour = vectorGroups2) + xlab("PCA1") + ylab("PCA2")
ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colour = vectorGroups2) + xlab("PCA1") + ylab("PCA2")
ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colour = vectorGroups2) + xlab("PCA1") + ylab("PCA2")
ggplot()+ geom_point(aes(x = pcaRaw$x[,1], y = pcaRaw$x[,2]), colour = vectorGroups2) + xlab("PCA1") + ylab("PCA2")
?list
list(pcaData)
pcaData <- list(pcaData)
pcaData <- list()
pcaData[1] <- pcaRaw$x[,1]
View(pcaData)
pcaData[[1]] <- pcaRaw$x[,1]
View(pcaData)
pcaData[[2]] <- pcaRaw$x[,2]
pcaData[[3]] <- vectorGroups2
View(pcaData)
dataPca <- as.data.frame(pcaData)
View(dataPca)
colnames(dataPca) <- c("PCA1", "PCA2", "Groups")
View(dataPca)
ggplot(dataPca)+ geom_point(aes(x = dataPca$PCA1, y = dataPca$PCA2, colour = dataPca$Groups)) + xlab("PCA1") + ylab("PCA2")
rMSIproc::plotValuesImage(peakM, pcaRaw$x[,1])
rMSIproc::plotValuesImage(peakM, pcaNormTic$x[,1])
ggplot(dataPca)+ geom_point(aes(x = dataPca$PCA1, y = dataPca$PCA2, colour = dataPca$Groups)) + xlab("PCA1") + ylab("PCA2")
View(dataPca)
View(pcaNormTic)
View(pcaRaw)
View(dataRaw)
# Insert where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/CollCap/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
# Insert the group for each image (control, control, problem, ...) in order
groupsImg <- c("Control1", "Control2", "Transition1", "Transition2", "Tumor1", "Tumor2")
groupsColors <- c("Blue", "Green", "Yellow", "Orance", "Red", "Purple")
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
if(length(peakM$numPixels) != 1){
matrixList <- matrixSeparation(peakM)
}
source('~/GitHub/rMSIteachings/initialPlotter.R', echo=TRUE)
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
if(length(peakM$numPixels) != 1){
matrixList <- matrixSeparation(peakM)
}
### PCA de dades sense normalitzar
dataRaw <- peakM$intensity
pcaRaw <- prcomp(dataRaw, center = T, scale. = T) ### Fem la PCA de la matriu de pics
dim(pcaRaw)
View(pcaRaw)
pcaData[[1]] <- pcaRaw$x[,1]
pcaData <- list()
pcaData[[1]] <- pcaRaw$x[,1]
pcaData[[2]] <- pcaRaw$x[,2]
pcaData[[3]] <- vectorGroups
listGroups <- mapply(function(groups,i){
rep(groups,  peakM$numPixels[i])
}, groupsColors, 1:length(groupsImg))
vectorGroups <- unlist(listGroups)
pcaData[[3]] <- vectorGroups
ggplot(dataPca)+ geom_point(aes(x = dataPca$PCA1, y = dataPca$PCA2, colour = dataPca$Groups)) + xlab("PCA1") + ylab("PCA2")
dataPca <- as.data.frame(pcaData)
ggplot(dataPca)+ geom_point(aes(x = dataPca$PCA1, y = dataPca$PCA2, colour = dataPca$Groups)) + xlab("PCA1") + ylab("PCA2")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PCA1, y = dataPca$PCA2, colour = dataPca$Groups)) + xlab("PCA1") + ylab("PCA2")
View(dataPca)
colnames(dataPca) <- c("PCA1", "PCA2", "Groups")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PCA1, y = dataPca$PCA2, colour = dataPca$Groups)) + xlab("PCA1") + ylab("PCA2")
listGroups2 <- lapply(1:length(peakM$numPixels), function(groups){
rep(groups, peakM$numPixels[groups])
})
View(listGroups2)
vectorGroups2 <- unlist(listGroup2)
vectorGroups2 <- unlist(listGroups2)
pcaData[[3]] <- vectorGroups2
ggplot(dataPca)+ geom_point(aes(x = dataPca$PCA1, y = dataPca$PCA2, colour = dataPca$Groups)) + xlab("PCA1") + ylab("PCA2")
listGroups2 <- lapply(1:length(peakM$numPixels), function(groups){
rep(groups, peakM$numPixels[groups])
})
View(listGroups2)
listGroups2 <- sapply(1:length(peakM$numPixels), function(groups){
rep(groups, peakM$numPixels[groups])
})
View(listGroups2)
dataPca <- as.data.frame(pcaData)
colnames(dataPca) <- c("PCA1", "PCA2", "Groups")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PCA1, y = dataPca$PCA2, colour = dataPca$Groups)) + xlab("PCA1") + ylab("PCA2")
colnames(dataPca) <- c("PC1", "PC2", "Groups")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups)) + xlab("PC1") + ylab("PC2")
pcaData[[3]] <- vectorGroups
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups)) + xlab("PC1") + ylab("PC2")
pcaData[[3]] <- vectorGroups
dataPca <- as.data.frame(pcaData)
colnames(dataPca) <- c("PC1", "PC2", "Groups")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups)) + xlab("PC1") + ylab("PC2")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups), alpha = 0.3) + xlab("PC1") + ylab("PC2")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2") + scale_fill_manual(labels = groupsImg)
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2") + scale_fill_manual(labels = groupsImg)
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2")
listGroups <- mapply(function(groups,i){
rep(groups,  peakM$numPixels[i])
}, groupsImg, 1:length(groupsImg))
vectorGroups <- unlist(listGroups)
pcaData[[3]] <- vectorGroups
dataPca <- as.data.frame(pcaData)
colnames(dataPca) <- c("PC1", "PC2", "Groups")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2")
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2") + scale_fill_manual(name = "Images")
rownames(dataPca) <- c(1:5333)
ggplot(dataPca)+ geom_point(aes(x = dataPca$PC1, y = dataPca$PC2, colour = dataPca$Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2") + scale_fill_manual(name = "Images")
ggplot(dataPca)+ geom_point(aes(x = PC1, y = PC2, colour = Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2")
# Insert the group for each image (control, control, problem, ...) in order
groupsImg <- c("Control", "Control", "Transition", "Transition", "Tumor", "Tumor")
listGroups <- mapply(function(groups,i){
rep(groups,  peakM$numPixels[i])
}, groupsImg, 1:length(groupsImg))
vectorGroups <- unlist(listGroups)
pcaData[[3]] <- vectorGroups
dataPca <- as.data.frame(pcaData)
colnames(dataPca) <- c("PC1", "PC2", "Groups")
ggplot(dataPca)+ geom_point(aes(x = PC1, y = PC2, colour = Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2")
View(dataPca)
pcaData[[1]] <- pcaNormTic$x[,1]
dataNormTic <- peakM$intensity/peakM$normalizations$TIC ### Dividim les intensitats pel factor de normalització TIC
pcaNormTic <- prcomp(dataNormTic, center = T, scale = T)
pcaData[[1]] <- pcaNormTic$x[,1]
pcaData[[2]] <- pcaNormTic$x[,2]
View(dataPca)
View(dataNormTic)
View(pcaNormTic)
View(pcaNormTic)
dataPca <- as.data.frame(pcaData)
colnames(dataPca) <- c("PC1", "PC2", "Groups")
rownames(dataPca) <- c(1:5333)
dataPca$PC1 = pcaNormTic$x[,1]
dataPca$PC1 == pcaNormTic$x[,1]
all(dataPca$PC1 == pcaNormTic$x[,1])
pcaData[[1]] <- pcaNormTic$x[,1]
pcaData[[2]] <- pcaNormTic$x[,2]
pcaData[[3]] <- vectorGroups
dataPca <- as.data.frame(pcaData)
colnames(dataPca) <- c("PC1", "PC2", "Groups")
rownames(dataPca) <- c(1:5333)
all(dataPca$PC1 == pcaNormTic$x[,1])
ggplot(dataPca)+ geom_point(aes(x = PC1, y = PC2, colour = Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2")
# Insert where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/CollCap/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
# Insert the group for each image (control, control, problem, ...) in order
groupsImg <- c("Control1", "Control2", "Transition1", "Transition1", "Tumor1", "Tumor2")
listGroups <- mapply(function(groups,i){
rep(groups,  peakM$numPixels[i])
}, groupsImg, 1:length(groupsImg))
vectorGroups <- unlist(listGroups)
pcaData[[3]] <- vectorGroups
dataPca <- as.data.frame(pcaData)
colnames(dataPca) <- c("PC1", "PC2", "Groups")
rownames(dataPca) <- c(1:5333)
ggplot(dataPca)+ geom_point(aes(x = PC1, y = PC2, colour = Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2")
dataNormTic <- peakM$intensity/peakM$normalizations$TIC ### Dividim les intensitats pel factor de normalització TIC
pcaNormTic <- prcomp(dataNormTic, center = T, scale = T)
pcaData[[1]] <- pcaNormTic$x[,1]
pcaData[[2]] <- pcaNormTic$x[,2]
pcaData[[3]] <- vectorGroups
dataPca <- as.data.frame(pcaData)
colnames(dataPca) <- c("PC1", "PC2", "Groups")
rownames(dataPca) <- c(1:5333)
ggplot(dataPca)+ geom_point(aes(x = PC1, y = PC2, colour = Groups), alpha = 0.5) + xlab("PC1") + ylab("PC2")
?prcomp
install.packages("rMSIproc")
