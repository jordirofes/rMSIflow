for(r in (1:length(plots))){
plotly::ggplotly(plots[[r]])
}
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,3)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
for(r in (1:length(plots))){
plotly::ggplotly(plots[[r]])
}
View(plots)
length(plots)
1:(length(plots))
1:(length(plots))
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,3)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
for(i in (1:length(plots))){
plotly::ggplotly(plots[[i]])
}
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,3)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
for(s in (1:length(plots))){
plotly::ggplotly(plots[[s]])
}
class(plots[[1]])
class(plots[[1,]])
class(plots[[1]])
class(plots[[1]][1])
class(plots[[1]][2])
class(plots[[1]])
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- 2   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
for(s in (1:length(plots))){
plotly::ggplotly(plots[[s]])
}
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- 2   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
#for(s in (1:length(plots))){
plotly::ggplotly(plots[[s]])
#}
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- 2   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
#for(s in (1:length(plots))){
plotly::ggplotly(plots)
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- 2   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
#for(s in (1:length(plots))){
plotly::ggplotly(plots[[]])
#}
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- 2   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
for(s in (1:2)){
plotly::ggplotly(plots[[s]])
}
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- 2   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
for(s in (1:1)){
plotly::ggplotly(plots[[s]])
}
for(s in (1:1)){
plotly::ggplotly(plots[[s]])
}
for(s in (1:1)){
plotly::ggplotly(plots[[s]])
}
plotly::ggplotly(plots[[s[1]:s[2]]])
plotly::ggplotly(plots[[s[1],s[2]]])
plotly::ggplotly(plots[[1:2]])
plotly::ggplotly(plots[[1]])
plotly::ggplotly(plots[[1]], plots[[2]])
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,4)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
#plotly::ggplotly(plots[[1]], plots[[]])
View(plots)
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,4)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
#plotly::ggplotly(plots[[1]], plots[[]])
plotly::ggplotly(plots[[1]], plots[[2]])
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,4)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
plotly::ggplotly(p = plots[[1]])
plotly::ggplotly(p = plots[[2]])
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,4)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
for(i in length(img2plot)){
plotly::ggplotly(p = plots[[i]])
}
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,4)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
for(i in length(img2plot)){
plotes <- plotly::ggplotly(p = plots[[i]])
}
View(plotes)
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600  #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,4)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
for(i in length(img2plot)){
plotly::ggplotly(p = plots[[i]])
}
View(matrixSeparation)
source('~/GitHub/rMSIteachings/initialPlotter.R', echo=TRUE)
knit_with_parameters('~/GitHub/rMSIteachings/rMSIteachings.Rmd', encoding = 'UTF-8')
package.skeleton(name = initialPlotter,list = initialPlotter.R, path = C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/initialPlotter)
package.skeleton(name = initialPlotter,list = initialPlotter.R, path = "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/initialPlotter")
package.skeleton(name = initialPlotter,list = initialPlotter, path = "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/initialPlotter")
```{r}
```{r}
initialplotter <- initialPlotter
View(initialplotter)
package.skeleton(name = initialPlotter,list = initialPlotter.R, path = C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/initialPlotter)
package.skeleton(name = initialPlotter,list = initialPlotter, path = "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/initialPlotter")
package.skeleton(name = initialPlotter, path = "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/initialPlotter")
?LoadMsiData
library(ggplot2)
ggplot2::ggplot() + geom_line(aes(x = image$mass, y = avSpec1))
#We can use rMSI functions to plot the average spectra of an image to explore the raw data
#First we have to put the path to the .tar that contains the image.
imageName <- "/CapiColl_Au_S01_1_sub-proc.tar"  #Tip# Even if your data is a .zip/.rar when you write the imageName you have to                                                 #Tip# write it as a .tar.
#Next, we run the code and a new window will appear allowing us to see the average spectra and interact with it.
image <- rMSI::LoadMsiData(file.path(wDir, imageName))
avSpec1 <- rMSIproc::AverageSpectrum(image)
avSepcData <- c()
ggplot2::ggplot() + geom_line(aes(x = image$mass, y = avSpec1))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
#We can use rMSI functions to plot the average spectra of an image to explore the raw data
#First we have to put the path to the .tar that contains the image.
imageName <- "/CapiColl_Au_S01_1_sub-proc.tar"  #Tip# Even if your data is a .zip/.rar when you write the imageName you have to                                                 #Tip# write it as a .tar.
#Next, we run the code and a new window will appear allowing us to see the average spectra and interact with it.
image <- rMSI::LoadMsiData(file.path(wDir, imageName))
avSpec1 <- rMSIproc::AverageSpectrum(image)
avSepcData <- c()
plotly::ggplotly(ggplot2:ggplot() + geom_line(aes(x = image$mass, y = avSpec1)))
plotly::ggplotly(ggplot2::ggplot() + geom_line(aes(x = image$mass, y = avSpec1)))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
plotly::ggplotly(ggplot2::ggplot() + geom_line(aes(x = image$mass, y = avSpec1, ylab("Intensity"))))
plotly::ggplotly(ggplot2::ggplot() + geom_line(aes(x = image$mass, y = avSpec1, ylab("Intensity"))))
plotly::ggplotly(ggplot2::ggplot() + geom_line(aes(x = image$mass, y = avSpec1))+ labs(xlab = "M/Z", ylab("Intensity")))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
plotly::ggplotly(ggplot2::ggplot() + geom_line(aes(x = image$mass, y = avSpec1))+ labs(xlab = "M/Z", ylab("Intensity")))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
plotly::ggplotly(ggplot2::ggplot() + geom_line(aes(x = image$mass, y = avSpec1))+ xlab("M/Z") + ylab("Intensity"))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
list.dirs(wDir)
list.files(wDir)
# Insert where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/CollCap/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
# Insert the group for each image (control, control, problem, ...) in order
groupsImg <- c("Control", "Control", "Transition", "Transition", "Tumor", "Tumor")
imageName <- list.files(wDir, pattern = "proc.tar")
avSpec <- lapply(imageName, function(name){
image <- rMSI::LoadMsiData(file.path(wDir, name))
aS <- rMSIproc::AverageSpectrum(image)
return(aS)
})
imageName
?list.files
bad <- list.files(wDir, pattern = "^ramdisk")
imageName <- imageName[!(imageName %in% bad)]
imageName
avSpec <- lapply(imageName, function(name){
image <- rMSI::LoadMsiData(file.path(wDir, name))
aS <- rMSIproc::AverageSpectrum(image)
return(aS)
})
View(avSpec)
View(avSpec)
sqrt(length(avSpec[[1]]))
View(avSpec)
View(image)
sqrt(length(avSpec[[1]]/854))
sqrt(length(avSpec[[1]])/854)
39*30*854
View(image)
189780/39
189780/38
189780/30
View(image)
7*138*26
7*138+26
image[["pos"]]
View(matrixList)
View(avSpec)
View(avSpec)
View(avSpec)
avSepcData <- data.frame(do.call(rbind, avSpec))
View(avSepcData)
avSepcData[,1]
avSepcData[,1]
avSepcData[,2]
image1 <- rMSI::LoadMsiData(file.path(wDir, imageName[1]))
image2 <- rMSI::LoadMsiData(file.path(wDir, imageName[2]))
View(image2)
View(image1)
image2$mass == image1$mass
all(image2$mass == image1$mass)
for(i in length(img2plot)){
plotly::ggplotly(p = plots[[1]])
}
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600       #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,4)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
for(i in length(img2plot)){
plotly::ggplotly(p = plots[[1]])
}
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600       #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,4)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
pl <- plotly::ggplotly()
for(i in length(img2plot)){
pl + plotly::ggplotly(p = plots[[i]])
}
pl <- plotly::ggplotly()
for(i in length(img2plot)){
pl <- pl + plotly::ggplotly(p = plots[[i]])
}
pl <- lapply(1:length(img2plot), function(i){
plotly::ggplotly(p = plots[[i]])
})
plotly::subplot(pl)
?subplot
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600       #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(2,4)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
pl <- lapply(1:length(img2plot), function(i){
plotly::ggplotly(p = plots[[i]])
})
plotly::subplot(pl)
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600       #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(4,6)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
pl <- lapply(1:length(img2plot), function(i){
plotly::ggplotly(p = plots[[i]])
})
plotly::subplot(pl)
View(matrixList)
#Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 600       #Tip# You can find all the mz in your data at peakM$mass
img2plot <- c(4,6,5)   #Tip# Writing a vector c() allows you to plot more images at the same time
plots <- initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg)
pl <- lapply(1:length(img2plot), function(i){
plotly::ggplotly(p = plots[[i]])
})
plotly::subplot(pl)
# Insert where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/CollCap/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
# Insert the group for each image (control, control, problem, ...) in order
groupsImg <- c("Control", "Control", "Transition", "Transition", "Tumor", "Tumor")
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
if(length(peakM$numPixels) != 1){
matrixList <- matrixSeparation(peakM)
}
source('~/GitHub/rMSIteachings/initialPlotter.R', echo=TRUE)
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
if(length(peakM$numPixels) != 1){
matrixList <- matrixSeparation(peakM)
}
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
View(matrixList)
View(peakM)
View(matrixList)
source('~/GitHub/rMSIteachings/initialPlotter.R', echo=TRUE)
source('~/GitHub/rMSIteachings/initialPlotter.R', echo=TRUE)
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
if(length(peakM$numPixels) != 1){
matrixList <- matrixSeparation(peakM)
}
View(matrixList)
mz <- 400
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC"))
mz <- 400
rMSIproc::plotPeakImageG(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
rMSIproc::plotPeakImageG(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
rMSIproc::plotPeakImageG(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
rMSIproc::plotPeakImageG(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
mz <- 400
plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC"))
mz <- 400
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1])
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC"))
mz <- 400
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC"))
plotly::subplot(pl)
mz <- 400
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC"))
plotly::subplot(pl, pl2)
View(pl2)
View(pl)
mz <- 400
k <- rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1])
k2 <- rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC")
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1],normalization = "TIC"))
plotly::subplot(pl, pl2)
View(k)
View(k2)
?plotPeakImage
library(rMSIproc)
View(plotPeakImage)
mz <- 400
k <- rMSIproc::plotPeakImage(matrixList[[1]], mz, plot_labels = groupsImg[1])
mz <- 400
k <- rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
k2 <- rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
plotly::subplot(pl, pl2)
mz <- 400
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
#pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
#pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
# plotly::subplot(pl, pl2)
mz <- 400
#rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
#rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
# plotly::subplot(pl, pl2)
mz <- 400
#rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
#rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
plotly::subplot(pl, pl2)
mz <- 400
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
#pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
#pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
#plotly::subplot(pl, pl2)
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "RMS")
mz <- 400
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1])
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "TIC")
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "RMS")
rMSIproc::plotPeakImage(matrixList[[1]], mz, labels = groupsImg[1],normalization = "AcqTic")
#pl <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1]))
#pl2 <- plotly::ggplotly(rMSIproc::plotPeakImageG(matrixList[[1]], mz, plot_labels = groupsImg[1], normalization = "TIC"))
#plotly::subplot(pl, pl2)
bad <- list.files(wDir, pattern = "^ramdisk")
imageName <- list.files(wDir, pattern = "proc.tar")
imageName <- imageName[!(imageName %in% bad)]
# Then we run the code so it extracts the image information and calculates de average spectrum
avSpec <- lapply(imageName, function(name){
image <- rMSI::LoadMsiData(file.path(wDir, name))
mass <- image$mass
aS <- rMSIproc::AverageSpectrum(image)
spect <- cbind(mass, aS)
return(aS)
})
avSepcData <- data.frame(do.call(rbind, avSpec))
View(avSepcData)
row.names(avSepcData) <- imageName
colnames(avSepcData) <- image$mass
# Then we run the code so it extracts the image information and calculates de average spectrum
avSpec <- lapply(imageName, function(name){
image <- rMSI::LoadMsiData(file.path(wDir, name))
mass <- image$mass
aS <- rMSIproc::AverageSpectrum(image)
spect <- cbind(mass, aS)
return(spect)
})
View(avSpec)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(spect) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSpec) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
avSepcData <- data.frame(do.call(rbind, avSpec))
View(avSepcData)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSpecData) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSpectData) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepctData) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line()+ xlab("M/Z") + ylab("Intensity"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(x = avSepcData$mass, y =avSepcData$aS)+ xlab("M/Z") + ylab("Intensity"))
View(avSpec)
avSepcData <- data.frame(avSpec)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(x = avSepcData$mass, y = avSepcData$aS.1)+
geom_line(x = avSepcData$mass, y = avSepcData$aS.2)+ geom_line(x = avSepcData$mass, y = avSepcData$aS.3)+
geom_line(x = avSepcData$mass, y = avSepcData$aS.2)+ geom_line(x = avSepcData$mass, y = avSepcData$aS.3)+
geom_line(x = avSepcData$mass, y = avSepcData$aS.4)+ xlab("M/Z") + ylab("Intensity"))
View(avSepcData)
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(x = avSepcData$mass, y = avSepcData$aS.1))
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(x = avSepcData$mass, y = avSepcData$`aS.1`))
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(x = mass, y = aS.1))
View(avSepcData)
ggplot2::ggplot(avSepcData) + geom_line(x = mass, y = aS.1)
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1)))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4))+ xlab("M/Z") + ylab("Intensity"))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1), colours = "red")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4))+ xlab("M/Z") + ylab("Intensity"))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1), colour = "red")) +
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3))+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4))+ xlab("M/Z") + ylab("Intensity"))
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1), colour = "red"))
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1), colour = "red")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2),colour = "blue")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3),colour = "yellow")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2),colour = "green")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3),colour = "orange")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4),colour = "black")+ xlab("M/Z") + ylab("Intensity"))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS.1), colour = "red")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2),colour = "blue")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3),colour = "yellow")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4),colour = "green")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.5),colour = "orange")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.6),colour = "black")+ xlab("M/Z") + ylab("Intensity"))
View(avSepcData)
# Here we plot the average spectrums we want to compare
plotly::ggplotly(ggplot2::ggplot(avSepcData) + geom_line(aes(x = mass, y = aS), colour = "red")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.1),colour = "blue")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.2),colour = "yellow")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.3),colour = "green")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.4),colour = "orange")+
geom_line(aes(x = avSepcData$mass, y = avSepcData$aS.5),colour = "black")+ xlab("M/Z") + ylab("Intensity"))
#rMSI::plotSpectra(mass = image$mass, intensity = avSpec1)
