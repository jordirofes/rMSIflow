runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
library(plotly)
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
# Insert here where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/Cervell/"
# Insert here where the file functions.R is located
dir2 <- "C:/Users/jordi/Documents/GitHub/rMSIteachings/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
source(paste0(dir2, "functions.R")) # This sources all the functions we will need
library(ggplot2)
library(plotly)
runApp('~/rMSIflow')
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
runApp('~/rMSIflow')
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- NA  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- NA  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
rMSIproc::plotPeakImageG(peakM, 150, peakM$normalizations$TIC)
rMSIproc::plotPeakImageG(peakM, 150, NA)
rMSIproc::plotPeakImageG(peakM, 150, peakM$normalizations$TIC)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
source('~/GitHub/rMSIteachings/functions.R')
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
matrixList <- sepMatrix(peakM)
peakM$names
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- NA  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg,normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg, norma = normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- NA  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg, norma = normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, groupsImg, norma = normalization, savePlot, fileN)
source('~/GitHub/rMSIteachings/functions.R')
source('~/GitHub/rMSIteachings/functions.R')
# Insert here where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/Cervell/"
# Insert here where the file functions.R is located
dir2 <- "C:/Users/jordi/Documents/GitHub/rMSIteachings/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
source(paste0(dir2, "functions.R")) # This sources all the functions we will need
library(ggplot2)
library(plotly)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, norma = normalization, savePlot, fileN)
# Insert here where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/Cervell/"
# Insert here where the file functions.R is located
dir2 <- "C:/Users/jordi/Documents/GitHub/rMSIteachings/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
source(paste0(dir2, "functions.R")) # This sources all the functions we will need
library(ggplot2)
library(plotly)
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
matrixList <- sepMatrix(peakM)
peakM$names
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, norma = normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- NA  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, norma = normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, norma = normalization, savePlot, fileN)
source('~/GitHub/rMSIteachings/functions.R')
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, norma = normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- NA  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, norma = normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- NA  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, norma = normalization, savePlot, fileN)
source('~/GitHub/rMSIteachings/functions.R')
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- NA  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, norma = normalization, savePlot, fileN)
source('~/GitHub/rMSIteachings/functions.R')
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- NA  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, norma = normalization, savePlot, fileN)
# Select m/z to plot and image number out of peakM$names to plot
peakM$names
mz2plot <- 150            # You can find all the m/z in your data using peakM$mass
img2plot <- 1           # Writing a vector c() allows you to plot more images at the same time. Input a 0 to plot all the images
normalization <- peakM$normalizations$TIC  # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F                 # Choose if you want to save the plots into a pdf file (T/F)
fileN <- "plotsRAW.pdf"   # Choose the name of the pdf file. If a file has the same name it will be overwritten
initialPlotter(peakM, matrixList, mz2plot,img2plot, norma = normalization, savePlot, fileN)
source('~/GitHub/rMSIteachings/functions.R')
data2clus <- peakM$intensity        # This variable allows you to choose the data you want to cluster. (It has to be a matrix of NxM
# dimensions where N must have the same length as number of pixels has the peak matrix)
norm4 <- peakM$normalizations$TIC   # Normalization applied to the data
numClusters <- 4                    # Number of cluster to make the k-means
merged <- T                         # This variable allows you to choose between clustering all images together (T) or clustering them
# separately (F)
kmeansData <- kmeansCluster(peakM, data2clus, norm4, numClusters, merged)
data2clus <- peakM$intensity        # This variable allows you to choose the data you want to cluster. (It has to be a matrix of NxM
# dimensions where N must have the same length as number of pixels has the peak matrix)
norm4 <- peakM$normalizations$TIC   # Normalization applied to the data
numClusters <- 3                    # Number of cluster to make the k-means
merged <- T                         # This variable allows you to choose between clustering all images together (T) or clustering them
# separately (F)
kmeansData <- kmeansCluster(peakM, data2clus, norm4, numClusters, merged)
img2plot <- c(1,2)  # Images you want to plot.
savePlot <- F         # Save the plot into a pdf file (T/F)
fileName3 <- ".pdf"   # Name of the .pdf file
ggplotly(clusterDataPlotting(peakM, matrixList, img2plot, groupsImg, kmeansData, savePlot, fileName3))
# Insert here where your data is located (The peak matrix and the .tar images)
wDir <- "C:/Users/jordi/Desktop/Metabolomica/Projecte MALDI/Cervell/"
# Insert here where the file functions.R is located
dir2 <- "C:/Users/jordi/Documents/GitHub/rMSIteachings/"
# Insert the name of the peak matrix .zip
peakData <- "mergeddata-peaks.zip"
source(paste0(dir2, "functions.R")) # This sources all the functions we will need
library(ggplot2)
library(plotly)
# Here we extract the Peak Matrix from the .zip and create and object with all the data assigned to peakM
peakM <- rMSIproc::LoadPeakMatrix(file.path(wDir, peakData))
# If your peak matrix is composed of multiple images this will separate them in multiple peak matrix
matrixList <- sepMatrix(peakM)
peakM$names
# To allow classification of the images in different groups you will need to insert the names of each group in the vector groupsImg in the order they are on the peak matrix
peakM$names # This allows you to see the order of the images on the peak matrix
# Insert the group for each image (control, control, problem, ...) in the order they are on the peak matrix
# If you input NA. Each group will have the name in peakM$names
# If you want multiple images to have the same group you can simply write the group name twice
groupsImg <- c("Au", "AuNa")
paste0(rep("Control",10),1:10) #If you have many images per experimental group you may want to use an expression like this
if(length(groupsImg) != length(peakM$names)){
stop("Be careful. The number of groups is not equal to the number of images. Every image should have a group assigned")
}
data2clus <- peakM$intensity        # This variable allows you to choose the data you want to cluster. (It has to be a matrix of NxM
# dimensions where N must have the same length as number of pixels has the peak matrix)
norm4 <- peakM$normalizations$TIC   # Normalization applied to the data
numClusters <- 3                    # Number of cluster to make the k-means
merged <- T                         # This variable allows you to choose between clustering all images together (T) or clustering them
# separately (F)
kmeansData <- kmeansCluster(peakM, data2clus, norm4, numClusters, merged)
img2plot <- c(1,2)  # Images you want to plot.
savePlot <- F         # Save the plot into a pdf file (T/F)
fileName3 <- ".pdf"   # Name of the .pdf file
ggplotly(clusterDataPlotting(peakM, matrixList, img2plot, groupsImg, kmeansData, savePlot, fileName3))
data2clus <- peakM$intensity        # This variable allows you to choose the data you want to cluster. (It has to be a matrix of NxM
# dimensions where N must have the same length as number of pixels has the peak matrix)
norm4 <- peakM$normalizations$TIC   # Normalization applied to the data
numClusters <- 4                    # Number of cluster to make the k-means
merged <- T                         # This variable allows you to choose between clustering all images together (T) or clustering them
# separately (F)
kmeansData <- kmeansCluster(peakM, data2clus, norm4, numClusters, merged)
img2plot <- c(1,2)  # Images you want to plot.
savePlot <- F         # Save the plot into a pdf file (T/F)
fileName3 <- ".pdf"   # Name of the .pdf file
ggplotly(clusterDataPlotting(peakM, matrixList, img2plot, groupsImg, kmeansData, savePlot, fileName3))
data2clus <- peakM$intensity        # This variable allows you to choose the data you want to cluster. (It has to be a matrix of NxM
# dimensions where N must have the same length as number of pixels has the peak matrix)
norm4 <- peakM$normalizations$TIC   # Normalization applied to the data
numClusters <- 5                    # Number of cluster to make the k-means
merged <- T                         # This variable allows you to choose between clustering all images together (T) or clustering them
# separately (F)
kmeansData <- kmeansCluster(peakM, data2clus, norm4, numClusters, merged)
img2plot <- c(1,2)  # Images you want to plot.
savePlot <- F         # Save the plot into a pdf file (T/F)
fileName3 <- ".pdf"   # Name of the .pdf file
ggplotly(clusterDataPlotting(peakM, matrixList, img2plot, groupsImg, kmeansData, savePlot, fileName3))
data2clus <- peakM$intensity        # This variable allows you to choose the data you want to cluster. (It has to be a matrix of NxM
# dimensions where N must have the same length as number of pixels has the peak matrix)
norm4 <- peakM$normalizations$TIC   # Normalization applied to the data
numClusters <- 4                    # Number of cluster to make the k-means
merged <- T                         # This variable allows you to choose between clustering all images together (T) or clustering them
# separately (F)
kmeansData <- kmeansCluster(peakM, data2clus, norm4, numClusters, merged)
img2plot <- c(1,2)  # Images you want to plot.
savePlot <- F         # Save the plot into a pdf file (T/F)
fileName3 <- ".pdf"   # Name of the .pdf file
ggplotly(clusterDataPlotting(peakM, matrixList, img2plot, groupsImg, kmeansData, savePlot, fileName3))
data2clus <- peakM$intensity        # This variable allows you to choose the data you want to cluster. (It has to be a matrix of NxM
# dimensions where N must have the same length as number of pixels has the peak matrix)
norm4 <- peakM$normalizations$TIC   # Normalization applied to the data
numClusters <- 2                    # Number of cluster to make the k-means
merged <- F                         # This variable allows you to choose between clustering all images together (T) or clustering them
# separately (F)
kmeansData <- kmeansCluster(peakM, data2clus, norm4, numClusters, merged)
img2plot <- c(1,2)  # Images you want to plot.
savePlot <- F         # Save the plot into a pdf file (T/F)
fileName3 <- ".pdf"   # Name of the .pdf file
ggplotly(clusterDataPlotting(peakM, matrixList, img2plot, groupsImg, kmeansData, savePlot, fileName3))
data2clus <- peakM$intensity        # This variable allows you to choose the data you want to cluster. (It has to be a matrix of NxM
# dimensions where N must have the same length as number of pixels has the peak matrix)
norm4 <- peakM$normalizations$TIC   # Normalization applied to the data
numClusters <- 3                    # Number of cluster to make the k-means
merged <- F                         # This variable allows you to choose between clustering all images together (T) or clustering them
# separately (F)
kmeansData <- kmeansCluster(peakM, data2clus, norm4, numClusters, merged)
img2plot <- c(1,2)  # Images you want to plot.
savePlot <- F         # Save the plot into a pdf file (T/F)
fileName3 <- ".pdf"   # Name of the .pdf file
ggplotly(clusterDataPlotting(peakM, matrixList, img2plot, groupsImg, kmeansData, savePlot, fileName3))
img2plot <- c(1,2)                 # Choose the images you want to plot
clus2comp <- c(2,3)              # Choose the clusters you want to plot
norm <- peakM$normalizations$TIC # Input here a vector with the normalization values. Input NA for no normalization.
clusterKmeansComparison(peakM, norm, img2plot, groupsImg, clus2comp, kmeansData)
img2plot <- c(1,2)                 # Choose the images you want to plot
clus2comp <- c(1,2,3)              # Choose the clusters you want to plot
norm <- peakM$normalizations$TIC # Input here a vector with the normalization values. Input NA for no normalization.
clusterKmeansComparison(peakM, norm, img2plot, groupsImg, clus2comp, kmeansData)
peakM$intensity
length(peakM$mass)
length(peakM$intensity)
dim(peakM$intensity)
peakM$numPixels
# This function makes the medium spectrum from selectec pixels from the peak matrix
pixels2compare <- c(1:688)   # Input the first set of pixels that are going to be compared
pixels2compare2 <- c(689:1513)# Input the second set of pixels that are going to be compared
name1 <- "Cortex"           # Insert a tag for the first set of pixels
name2 <- "Medula"           # Insert a tag for the second set of pixels
normalization <- peakM$normalizations$TIC    # Input here a vector with the normalization values. Input NA for no normalization.
savePlot <- F               # Choose if you want to save the plots into a pdf file (T/F)
fileName1 <- ".pdf"         # Choose the name of the pdf file. If a file has the same name it will be overwritten
medSpecComp(peakM, pixels2compare, pixels2compare2, normalization, name1, name2, savePlot, fileName1)
img2plot <- c(1,2)                 # Choose the images you want to plot
clus2comp <- c(1,2,3)              # Choose the clusters you want to plot
norm <- peakM$normalizations$TIC # Input here a vector with the normalization values. Input NA for no normalization.
clusterKmeansComparison(peakM, norm, img2plot, groupsImg, clus2comp, kmeansData)
View(pcaD)
data2clus <- pcaD$x[,1]        # This variable allows you to choose the data you want to cluster. (It has to be a matrix of NxM
# dimensions where N must have the same length as number of pixels has the peak matrix)
norm4 <- NA   # Normalization applied to the data
numClusters <- 3                    # Number of cluster to make the k-means
merged <- F                         # This variable allows you to choose between clustering all images together (T) or clustering them
# separately (F)
kmeansData <- kmeansCluster(peakM, data2clus, norm4, numClusters, merged)
length(pcaD$x[,1])
length(pcaD$x[1,])
cosCalc <- function(peakMatrix){
df <- peakMatrix$intensity
cosSimil <- lapply(1:length(peakMatrix$mass),function(x){
lapply(1:length(peakMatrix$mass),function(y){
if(x == y){return(0)}
return(sum(df[,x]*df[,y])/
(sqrt(sum(df[,x]^2))*sqrt(sum(df[,y]^2))))
})
})
res <- matrix(unlist(cosSimil), nrow = length(peakMatrix$mass))
return(res)
}
crNet <- function(peakMatrix,cosMin = 0.95){
cosMatrix <- cosCalc(peakMatrix)
m <- cosMatrix > cosMin
allgr <- igraph::graph_from_adjacency_matrix(m,mode = "undirected")
}
massGroups <- function(cosNw, peakMatrix){
iter <- 1
gr <- list()
v <- c(1:length(igraph::degree(cosNw)))
while(length(v) != 0){
dg <- which.max(igraph::degree(cosNw)[v])
dg <- v[dg]
gr[[iter]] <- igraph::bfs(cosNw, dg, unreachable = F)$order
v <- v[!v %in% as.numeric(gr[[iter]][!is.na(gr[[iter]])])]
iter <- iter + 1
}
gr3 <- lapply(gr, function(x){
a <- x[!is.na(x)]
a <- as.numeric(a)
})
gr4 <- list()
for(i in 1:length(gr3)){
if(length(gr3[[i]]) != 1){
gr4[[i]] <- gr3[[i]]
}
}
gr5 <- lapply(gr4, function(x){
peakM$mass[x]
})
return(gr5)
}
mat2net <- peakM
minCos <- 0.94
netW <- crNet(mat2net, minCos)
edgeL <- igraph::get.edgelist(netW)
massL <- apply(edgeL, 2, function(x){peakM$mass[x]})
massDf <- cbind(massL, massL[,1] - massL[,2])
cosin <- cosCalc(peakM)
massDifMatrix <- lapply(1:length(peakM$mass),function(x){
lapply(1:length(peakM$mass),function(y){
if(x == y){return(0)}
return(peakM$mass[x] - peakM$mass[y])
})
})
h <- hist(abs(massDifMatrix[cosin > 0.94]), breaks = 3200)
View(massDifMatrix)
massDifMatrix <- matrix(unlist(massDifMatrix), nrow = length(peakM$mass))
h <- hist(abs(massDifMatrix[cosin > 0.94]), breaks = 3200)
medMat <- cbind(h$mids, h$counts)
View(massDf)
View(medMat)
annotation <- rMSIproc::peakAnnotation(peakM)
View(annotation)
annotation[["adducts"]][["829.4746"]]
cosin[430,421]
peakM$mass[300]
peakM$mass[400]
peakM$mass[399]
peakM$mass[398]
peakM$mass[397]
peakM$mass[395]
peakM$mass[396]
cosin[396,421]
cosin[397,421]
cosin[395,421]
cosin[399,421]
cosin[394,421]
cosin[393,421]
cosin[395,421]
cosin[397,421]
cosin[398,421]
cosin[396,421]
annotation[["adducts"]][["827.6502"]]
cosin[428,419]
cosin[395,419]
cosin[394,419]
peakM$mass[385]
peakM$mass[389]
peakM$mass[395]
peakM$mass[393]
peakM$mass[394]
cosin[394,419]
cosin[393,419]
cosin[395,419]
cosin[396,419]
cosin[391,419]
peakM$mass[391]
cosin[391,419]
peakM$mass[391]-peakM$mass[419]
